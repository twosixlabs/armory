---

name: üíª Scenario Evaluation

on:
  workflow_call:
  workflow_dispatch:


jobs:
  matrix_generator:
    name: Matrix Generator
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: üêÑ Got git?
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üë©‚Äçüíª Generating Matrix
        id: generate-matrix
        run: |
          echo "::set-output name=matrix::$(find ./scenario_configs -type f -name "*.json" | jq -cnR '[inputs | select(length>0)]')"


  matrix_job:
    runs-on: ubuntu-latest
    # needs: matrix_generator
    strategy:
      matrix:
        # scenario_path: ${{ fromJson(needs.matrix_generator.outputs.matrix) }}
        scenario_path:
          - scenario_configs/cifar10_baseline.json
          - scenario_configs/mnist_baseline.json
    steps:
      - name: üêÑ Got git?
        uses: actions/checkout@v3

      - name: Setup Environment
        uses: ./.github/actions/evaluations/setup_environment
        with:
          cache_version: ${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Install Prerequisites
        run: |
          source $VENV


      # - name: üêç Use Python 3.9
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.9

      # - name: üå± Setup Test Enviroment
      #   run: |
      #     python -m pip install --upgrade pip

      # - name: ‚öôÔ∏è Installing Armory
      #   shell: bash
      #   run: |
      #     pip install --no-compile --editable '.[developer]'
      #     armory configure --use-defaults
      #     # pip install --no-compile --editable '.[developer,engine,math,datasets,pytorch]'

      - run: |
          echo "${{ matrix.scenario_path }}"

      # - name: üë©‚Äçüíª Generating Matrix
      #   id: generate-matrix
      #   # working-directory: .github/workflows/
      #   env:
      #     ENV_PRODUCTION: false
      #   run: |
      #     echo "::set-output name=matrix::$(find ./scenario_configs -type f -name "*.json" | jq -cnR '[inputs | select(length>0)]')"

      #     # python ./bin/scenario-evaluation-workflow.py generate-matrix "${GITHUB_WORKSPACE}/scenario_configs"
      #     #SCENARIO_STR=`python ./bin/scenario-evaluation-workflow.py run-scenario "${GITHUB_WORKSPACE}/scenario_configs"`
      #     # echo SCENARIO_STR=$SCENARIO_STR >> $GITHUB_ENV
      #     # echo "::set-output name=matrix::${SCENARIO_STR}"

      # - name: üìù Echo Environs
      #   shell: python
      #   run: |
      #     print(__import__('os').environ)

  # matrix_runner:
  #     - name: ü§û Running Evals
  #       env:
  #         PYTEST_PARAMS: --exitfirst --suppress-no-test-exit-code
  #       shell: bash
  #       run: |
  #         echo "Testing Python Version: ${{ matrix.python-version }}"
  #         pytest -c pyproject.toml --verbose --show-capture=no -s ./tests/end_to_end/test_scenario_runner.py


  # debugger:
  #   name: Debugger
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: üìù Echo Environs
  #       shell: python
  #       run: |
  #         print(__import__(os).environ)

