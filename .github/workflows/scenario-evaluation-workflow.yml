name: üíª Scenario Evaluation

on: workflow_call

jobs:
  matrix-generator:
    name: Matrix Generator
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: üêÑ Got git?
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚öôÔ∏è Load Environment
        uses: ./.github/actions/evaluations/setup_environment

      - name: üë©‚Äçüíª Generating Matrix
        id: generate-matrix
        working-directory: .github/workflows/
        env:
          ENV_PRODUCTION: false
        run: |
          SCENARIO_STR=`python ./bin/scenario-evaluation-workflow.py generate-matrix "${GITHUB_WORKSPACE}/scenario_configs"`
          #SCENARIO_STR=`python ./bin/scenario-evaluation-workflow.py run-scenario "${GITHUB_WORKSPACE}/scenario_configs"`
          echo SCENARIO_STR=$SCENARIO_STR >> $GITHUB_ENV
          # TODO: If this doesnt work, try echoing to env.GTIHUB then jsonifying it.
          MATRIX_STR=${{ toJSON(env.SCENARIO_STR) }}
          echo $MATRIX_STR
          echo "::set-output name=matrix::${MATRIX_STR}"

      - name: üìù Echo matrix
        run: |
          echo "================================================="
          echo ${{ steps.generate-matrix.outputs.matrix }}


  matrix-job:
    runs-on: ubuntu-latest
    needs: matrix-generator
    strategy:
      matrix: ${{ fromJson(needs.matrix-generator.outputs.matrix) }}
    steps:
      - run: |
          echo "${{ $GITHUB_ENV }}"
          echo "${{ matrix.scenario_path }}"

      # - name: üìù Echo Environs
      #   shell: python
      #   run: |
      #     print(__import__('os').environ)

  # matrix_runner:
  #     - name: ü§û Running Evals
  #       env:
  #         PYTEST_PARAMS: --exitfirst --suppress-no-test-exit-code
  #       shell: bash
  #       run: |
  #         echo "Testing Python Version: ${{ matrix.python-version }}"
  #         pytest -c pyproject.toml --verbose --show-capture=no -s ./tests/end_to_end/test_scenario_runner.py


  # debugger:
  #   name: Debugger
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: üìù Echo Environs
  #       shell: python
  #       run: |
  #         print(__import__(os).environ)

