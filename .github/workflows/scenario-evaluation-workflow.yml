---

name: 💻 Full Scenario Evaluation

on:
  workflow_call:
  # workflow_dispatch:


jobs:
  matrix_generator:
    name: Matrix Generator
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: 🐄 Got git?
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 👩‍💻 Generating Matrix
        id: generate-matrix
        run: |
          echo "::set-output name=matrix::$(find ./scenario_configs -type f -name "*.json" | jq -cnR '[inputs | select(length>0)]')"


  matrix_job:
    runs-on: ubuntu-latest
    # needs: matrix_generator
    strategy:
      matrix:
        # scenario_path: ${{ fromJson(needs.matrix_generator.outputs.matrix) }}
        scenario_path:
          - scenario_configs/cifar10_baseline.json
          - scenario_configs/mnist_baseline.json
    steps:
      - name: 🐄 Got git?
        uses: actions/checkout@v3

      - name: Setup Environment
        uses: ./.github/actions/evaluations/setup_environment
        with:
          cache_version: ${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Install Prerequisites
        run: |
          source $VENV

      - run: |
          echo "${{ matrix.scenario_path }}"
          python ./bin/scenario-evaluation-workflow.py run-scenario ${{ matrix.scenario_path }} 2>&1 | tee /tmp/artifacts/scenario_evaluation.log
      # pytest -c pyproject.toml --verbose --show-capture=no -s ./tests/end_to_end/test_scenario_runner.py

      - name: 📁 Archiving Artifacts
        uses: actions/upload-artifact@v3
        if: ${{ !failure() }}
        continue-on-error: true
        with:
          name: evaluation-artifacts
          retention-days: 1
          path: |
            ~/.armory/outputs/
            /tmp/artifacts

  # debugger:
  #   name: Debugger
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 📝 Echo Environs
  #       shell: python
  #       run: |
  #         print(__import__(os).environ)

