---
# yamllint disable rule:comments-indentation
# yamllint disable rule:indentation

name: üéÅ Armory Release Workflow

on:
  repository_dispatch:
    types: build-and-release

  workflow_dispatch:
    inputs:
      dry_run:
        type: boolean
        description: Execute a dry-run(no uploads) of the workflow
        required: true
        default: true

# Limit workflow to one job per branch.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RELEASE_DRY_RUN: "${{ github.event_name != 'repository_dispatch' && github.event.inputs.dry_run }}"

jobs:
  release-wheel:
    name: üõû Build release wheel
    runs-on: ubuntu-latest
    steps:
      - name: üêç Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: üì© Checkout Armory w/ full depth(for tags and SCM)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.client_payload.branch }}

      - name: üî® Build wheel
        run: |
          pip install pip==22.2.2
          # Ensure `hatch` is installed
          pip install hatch
          hatch build --clean --target wheel

      # TODO: Add pre-release steps; e.g. publish to TestPyPI
      - name: üê¶ Release wheel
        if: ${{ env.RELEASE_DRY_RUN == 'false' }}
        uses: pypa/gh-action-pypi-publish@master
        with:
          # user: __token__
          password: ${{ secrets.pypi_token }}
          packages_dir: dist
          verbose: true

      - name: üìÅ Archiving Artifacts
        uses: actions/upload-artifact@v3
        if: ${{ !failure() }}
        continue-on-error: true
        with:
          name: armory-release-artifacts
          retention-days: 1
          path: |
            dist/*.whl


  release-docker:
    name: Build and Release Docker Images
    needs: [release-wheel]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: pytorch
          - image: pytorch-deepspeech
          - image: tf2
          - image: carla-mot
    steps:
      - name: üêç Setup Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: üì© Checkout Armory w/ full depth(for tags and SCM)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.client_payload.branch }}

      - name: üåé Setup Build Environment
        run: |
          pip install pip>=22.2.2
          pip install .

          armory configure --use-defaults

          ARMORY_VERSION=`python -m armory --version 2> /dev/null | sed -r 's/\+/\./g'`
          echo "ARMORY_VERSION=${ARMORY_VERSION}" >> $GITHUB_ENV

      - name: ‚òÅÔ∏è Login to DockerHub
        if: ${{ env.RELEASE_DRY_RUN == 'false' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        # run: |
        #   docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      # TODO: Build Base Image
      - name: üî® Build Release Image
        run: |
          echo "Armory Version: ${{ env.ARMORY_VERSION }}"
          echo "Building Armory ${{ matrix.image }} Image"
          python docker/build.py --framework ${{ matrix.image }} >> /tmp/build.log

      - name: üìÅ Archiving Artifacts
        uses: actions/upload-artifact@v3
        if: ${{ !failure() }}
        continue-on-error: true
        with:
          name: armory-release-artifacts
          retention-days: 1
          path: |
            /tmp/build.log

      - name: üì¶ Push Release Images
        if: ${{ env.RELEASE_DRY_RUN == 'false' }}
        run: |
          ARMORY_VERSION="${{ env.ARMORY_VERSION }}"

          echo "Pushing ${{ matrix.image }}:${ARMORY_VERSION}"
          docker push twosixarmory/${{ matrix.image }}:${ARMORY_VERSION}

          echo "Tagging ${{ matrix.image }}:${ARMORY_VERSION} as ${{ matrix.image }}:latest"
          docker tag twosixarmory/${{ matrix.image }}:${ARMORY_VERSION} twosixarmory/${{ matrix.image }}:latest

          echo "Pushing ${{ matrix.image }}:latest"
          docker push twosixarmory/${{ matrix.image }}:latest


# yamllint enable rule:indentation
# yamllint enable rule:comments-indentation

# Workflow Test:
# act --detect-event -j release-wheel
# act workflow_dispatch -j release-docker --eventpath .github/workflows/tests/release-dry-run.json
