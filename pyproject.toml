[project]
requires-python = ">=3.7"

name        = "armory-testbed"
description = "Adversarial Robustness Test Bed"
dynamic     = [ "version" ]
license     = "MIT"
authors = [
  { name = "Two Six Technologies", email = "armory@twosixtech.com" },
]

classifiers = [
  "Development Status :: 3 - Alpha",
  "License :: OSI Approved :: MIT License",
  "Environment :: Console",
  "Natural Language :: English",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# the minimal set needed to run armory.main (launcher)
dependencies = [
    "setuptools_scm",
    "docker",
    "jsonschema",
    "loguru",
    "pytest",
    "PyYAML",
    "requests",
    "toml",
]

[project.urls]
Source        = "https://github.com/twosixlabs/armory"
Documentation = "https://armory.readthedocs.io/en/latest/"

[project.scripts]
armory = "armory.__main__:main"


# please see docs/getting_started.md#the-armory-flavors for how these
# optional dependencies work
[project.optional-dependencies]
developer =[
    "hatch", # build tool
    "wheel",
    "mkdocs",
    "black[jupyter]==22.*",
    "flake8",
    "yamllint",
    "bandit[toml]", # code scanning
    "tox", # testing
    "hydra-core", # configuration
]

engine = [
    "adversarial-robustness-toolbox==1.12.1",
    "Pillow == 9.2.0",           # Data dependencies
    "boto3 == 1.24.72",          # Needed for armory.data.utils
    "botocore == 1.27.77",       # Needed for armory.data.utils
    "ffmpeg-python == 0.2.0",    # Needed for armory.utils.export
    "opencv-python == 4.6.0.66",  # Needed for CARLA baseline scenario
    "pydub >= 0.24.1",           # this is in ART's extra-requires
    "tensorboardx == 2.5.1",
]

datasets = [
    "tensorflow-datasets == 4.6.0",
    # TODO: this duplicate "tensorflow" is unclean. Unfortunately, tfds does
    # not require "tensorflow" so we need to add it here.
    "tensorflow == 2.8.0",
    "protobuf==3.20.1",
]

datasets-builder = [
    "armory-testbed[datasets,engine]",
    "apache-beam >= 2.22.0",
]

math = [
    "numpy >= 1.21.0",
    "scipy >= 1.3.2",
    "scikit-learn >= 1.0.0",
    "matplotlib == 3.5.3",
]

pytorch = [
    "armory-testbed[engine,datasets,math]",
    "torch == 1.12.1",
    "torchvision == 0.13.1",
    "torchaudio == 0.12.1",
]

tensorflow = [
    "armory-testbed[engine,datasets,math]",
    "tensorflow == 2.8.0",
    "tf-models-official",
    "object_detection @ git+https://github.com/tensorflow/models/#subdirectory=research/object_detection/packages/tf2",
]

deepspeech = [
    "armory-testbed[pytorch,engine,datasets,math]",
    "python-levenshtein",
    "torchmetrics == 0.9.3",
    "sox == 1.4.1",
    "librosa == 0.9.2",
    "google-cloud-storage == 2.5.0",
    "transformers",
    "pytorch-lightning == 1.4.9",
    "hydra-core == 1.2.0",
    "hydra-configs-pytorch-lightning @ git+https://github.com/romesco/hydra-lightning/#subdirectory=hydra-configs-pytorch-lightning",
]

jupyter = [
    "jupyterlab == 3.4.7",
]

[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling>=1.10.0",
  "hatch-vcs",
]

[tool.hatch.version]
source = "vcs"
path   = "armory/__about__.py"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.hatch.build.hooks.vcs]
version-file = "armory/__about__.py"
template = """
# coding: utf-8
# File automatically generated by setuptools_scm.
# Do not change or track in version control.
__version__ = {version!r}
version_tuple = {version_tuple!r}
"""

[tool.hatch.build]
ignore-vcs   = false
reproducible = true
directory    = "dist"
include = [
  "armory/",
  "tests/",
  "scenario_configs/",
  "pyproject.toml",
]
exclude = [
  "tools/",
]

[tool.hatch.metadata]
allow-direct-references = true


# Tools
[tool.bandit]
recursive = true
targets = [ "armory" ]
skips   = [
  "B101",  # Ignore defensive `assert`s (especially useful for mypy)
  "B404",  # Ignore warnings about importing subprocess
  "B603",  # Ignore warnings about calling subprocess.Popen without shell=True
  "B607",  # Ignore warnings about calling subprocess.Popen without a full path to executable
]

# ------------ black ------------
#[tool.black]
#include = '\.py$'
#line-length = 120
#target-version = ['py37', 'py38', 'py39', 'py310']
#skip_magic_trailing_comma = true
#skip-string-normalization = true  # Ignore double quote replacements
#extend-ignore = [
#  "E203",                         # See https://github.com/PyCQA/pycodestyle/issues/373
#]


# ------------ pytest ------------
[tool.pytest.ini_options]
addopts    = "-ra -q"
log_level  = "ERROR"
testpaths  = [ "tests" ]
log_cli = true
filterwarnings = [ ]
markers = [
  "slow",                       # This test is slow
  "online",                     # This test needs open internet access
  "keras",                      # This test requires tf1.compat support for keras
  "tf1",                        # This test requires tf1 support (tf2.compat.v1 adapter)
  "docker_required",            # This Test Requires Docker to run
  "end_to_end",                 # Full End to End Test (typically slow)
  "unit",                       # These are Unit Tests (fast and lightweight)
  "pytorch_deepspeech",         # This test requires pytorch-deepspeech docker container (or equivalent dependencies) to run
]
# TODO: Add these to the pytest options. From armory/validation/test_config
# addopts = -p no:cacheprovider
# filterwarnings =
#     ignore::DeprecationWarning
#     ignore::RuntimeWarning
#     ignore::UserWarning:tensorflow*
#     ignore::UserWarning:torch*
#     ignore::Warning:art*


# ------------ pre-commit hooks ------------
[tool.vulture]
paths             = ["src"]
ignore_decorators = ["#~vulture.ignore~#"]
min_confidence    = 80
make_whitelist    = true
sort_by_size      = true
verbose           = true
